{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","devices","device","connected","this","handleRefreshDevices","window","bluetoothSerial","list","console","log","setState","connect","address","err","onClick","map","d","handleConnect","name","color","rgbcol","hexRgb","write","red","green","blue","style","textAlign","padding","display","justifyContent","onChange","handleChangeComplete","className","renderList","renderColorPicker","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","startApp","ReactDOM","render","StrictMode","document","getElementById","cordova","addEventListener"],"mappings":"6NAAe,I,mCCoFAA,E,kDA3Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,OAAQ,GACRC,WAAW,GALI,E,qDASnB,WACEC,KAAKC,yB,kCAGP,WAAwB,IAAD,OACrBC,OAAOC,gBAAgBC,MAAK,SAAAP,GAC1BQ,QAAQC,IAAIT,GACZ,EAAKU,SAAS,CAAEV,iB,2BAIpB,SAAcC,GAAS,IAAD,OACpBI,OAAOC,gBAAgBK,QACrBV,EAAOW,SACP,WACEJ,QAAQC,IAAI,aACZ,EAAKC,SAAS,CAAER,WAAW,EAAMD,cAEnC,SAACY,GACCL,QAAQC,IAAII,GACZ,EAAKH,SAAS,CAAER,WAAW,S,wBAIjC,WAAc,IAAD,OACX,OAAO,gCACL,wBAAQY,QAAS,kBAAM,EAAKV,wBAA5B,qBAGA,8BACGD,KAAKJ,MAAMC,QAAQe,KAAI,SAAAC,GAAC,OAAI,+BAC3B,wBAAQF,QAAS,kBAAM,EAAKG,cAAcD,IAA1C,qBAD2B,MACuCA,EAAEE,kB,kCAM5E,SAAqBC,GACnBX,QAAQC,IAAIU,GACZ,IAAMC,EAASC,YAAOF,GACtBX,QAAQC,IAAIW,GACZf,OAAOC,gBAAgBgB,MAAvB,YAAkCF,EAAOG,IAAzC,OACAlB,OAAOC,gBAAgBgB,MAAvB,YAAkCF,EAAOI,MAAzC,OACAnB,OAAOC,gBAAgBgB,MAAvB,YAAkCF,EAAOK,KAAzC,S,+BAIF,WACE,OAAO,gCACL,sBAAMC,MAAO,CAACC,UAAW,SAAUC,QAAQ,IAA3C,0BAA8DzB,KAAKJ,MAAME,OAAOiB,QAChF,sBAAKQ,MAAO,CAACG,QAAS,OAAQC,eAAgB,SAAUF,QAAS,IAAjE,UACA,cAAC,IAAD,CAAgBG,SAAU5B,KAAK6B,uBAD/B,Y,oBAMJ,WACE,OAAO,sBAAKC,UAAU,MAAf,WACD9B,KAAKJ,MAAMG,WAAaC,KAAK+B,aAC9B/B,KAAKJ,MAAMG,WAAaC,KAAKgC,2B,GAtEpBC,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDRQ,EAAW,WACfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,UAIvB/C,OAAOgD,QAGVF,SAASG,iBAAiB,cAAeP,GAAU,GAFnDA,IAQFT,K","file":"static/js/main.f644fe8f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\"\nimport logo from './logo.svg';\nimport './App.css';\nimport { SketchPicker } from 'react-color';\nimport { HexColorPicker } from \"react-colorful\";\nimport hexRgb from 'hex-rgb';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      devices: [],\n      device: {},\n      connected: false\n    }\n  }\n\n  componentDidMount() {\n    this.handleRefreshDevices()\n  }\n\n  handleRefreshDevices() {\n    window.bluetoothSerial.list(devices => {\n      console.log(devices)\n      this.setState({ devices })\n    })\n  }\n\n  handleConnect(device) {\n    window.bluetoothSerial.connect(\n      device.address,\n      () => {\n        console.log(\"connected\")\n        this.setState({ connected: true, device })\n      },\n      (err) => {\n        console.log(err)\n        this.setState({ connected: false })\n      })\n  }\n\n  renderList() {\n    return <div>\n      <button onClick={() => this.handleRefreshDevices()}>\n        refresh\n      </button>\n      <div>\n        {this.state.devices.map(d => <li>\n          <button onClick={() => this.handleConnect(d)}>connect</button> - {d.name}\n        </li>)}\n      </div>\n    </div>\n  }\n\n  handleChangeComplete(color){\n    console.log(color)\n    const rgbcol = hexRgb(color)\n    console.log(rgbcol)\n    window.bluetoothSerial.write(`r=${rgbcol.red}\\n`);\n    window.bluetoothSerial.write(`g=${rgbcol.green}\\n`);\n    window.bluetoothSerial.write(`b=${rgbcol.blue}\\n`);\n    \n  }\n\n  renderColorPicker(){\n    return <div>\n      <div  style={{textAlign: \"center\", padding:20}}>Connected to {this.state.device.name}</div>\n      <div style={{display: \"flex\", justifyContent: \"center\", padding: 20}}>\n      <HexColorPicker onChange={this.handleChangeComplete} />;\n      </div>\n    </div>\n  }\n\n  render() {\n    return <div className=\"App\">\n        {!this.state.connected && this.renderList()}\n        {this.state.connected && this.renderColorPicker()}\n    </div>\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst startApp = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\nif (!window.cordova) {\n  startApp();\n} else {\n  document.addEventListener(\"deviceready\", startApp, false);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}